import pefile
from colorama import Fore, init
from capstone import *


def get_imports(pe):
    imports = {}
    for entry in pe.DIRECTORY_ENTRY_IMPORT:
        for imp in entry.imports:
            imports[imp.address] = imp.name
    return imports


def detect_debug_techniques(name):
    ANTI_DEBUGGING = {
        "IsDebuggerPresent", "CheckRemoteDebuggerPresent", "NtGlobalFlag",
        "NtQueryInformationProcess", "NtQueryObject", "OutputDebugString"
    }

    TIMING_ATTACKS = {
        "Sleep", "SleepEx", "NtDelayExecution", "SetTimer", "TimeSetEvent",
        "WaitForSingleObject", "CreateWaitableTimer"
    }

    INJECTION_TECHNIQUES = {
        "SetWindowsHooksEx", "NtCreateThreadEx", "RtlCreateUserThread",
        "NtQueueApcThread", "GetThreadContext", "SetThreadContext"
    }

    if name in ANTI_DEBUGGING:
        return Fore.RED + 'Found Anti Debugger!'
    elif name in TIMING_ATTACKS:
        return Fore.RED + 'Found Timing Attacks'
    elif name in INJECTION_TECHNIQUES:
        return Fore.RED + 'Found Injections techniques'
    return None


def main():
    pe = pefile.PE(r"<Path to the PE file>")

    mode = CS_MODE_64 if pe.FILE_HEADER.Machine == pefile.MACHINE_TYPE['IMAGE_FILE_MACHINE_AMD64'] else CS_MODE_32

    md = Cs(CS_ARCH_X86, mode)
    image_base = pe.OPTIONAL_HEADER.ImageBase
    imports = get_imports(pe)

    for section in pe.sections:
        section_name = section.Name.decode('utf-8').rstrip('\x00')
        if section_name == ".text":
            for i in md.disasm(section.get_data(), section.VirtualAddress):
                virtual_address = image_base + i.address
                if i.mnemonic == "call" and "rip" in i.op_str:
                    offset = int(i.op_str.split('+')[-1].replace(']', '').strip(), 16)
                    effective_address = i.address + i.size + offset
                    clean_rip_virtual_address = image_base + effective_address
                    name = imports.get(clean_rip_virtual_address, None)
                    if name:
                        name = name.decode('utf-8')
                        detection_result = detect_debug_techniques(name)
                        if detection_result:
                            init(autoreset=True)
                            print(detection_result)
                            print(Fore.BLUE + section_name + ":" + Fore.GREEN + hex(
                                virtual_address) + "\t" + Fore.YELLOW + i.mnemonic + "\t" + Fore.RED + name + Fore.WHITE + "[" + hex(
                                clean_rip_virtual_address) + "]")


if __name__ == "__main__":
    main()
