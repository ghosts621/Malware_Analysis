# -*- coding: utf-8 -*-
# Thanks for OALABS for beast EP
#https://github.com/OALabs/hashdb

import algorithms
import concurrent.futures
import json


class AlgorithmError(Exception):
    pass


def list_algorithms():
    return list(algorithms.modules.keys())


def hash(algorithm_name, data):
    if algorithm_name not in list(algorithms.modules.keys()):
        raise AlgorithmError("Algorithm not found")
    if type(data) == str:
        data = data.encode('utf-8')
    elif isinstance(data, int):
        data = data.to_bytes((data.bit_length() + 7) // 8, byteorder='big')
    return algorithms.modules[algorithm_name].hash(data)

def hash_dll(dll, algo):
    try:
        hashed_data = hash(algo, dll)
        if isinstance(hashed_data, bytes):  # Decode if it's bytes
            hashed_data = hashed_data.decode('utf-8')
        elif isinstance(hashed_data, int):  # Convert int to string
            hashed_data = str(hashed_data)
        return (dll, algo, hashed_data.strip())
    except Exception as e:
        #print(f"Error hashing {dll} with {algo}: {e}")
        return None
def batched_hashing(dll_names, algos):
    results = []
    for dll in dll_names:
        for algo in algos:
            results.append(hash_dll(dll, algo))
    return results

def main():
    with open("dll_list.txt", 'r') as file:
        dll_names = [line.strip() for line in file.readlines()]

    hashed_data_dict = {}
    BATCH_SIZE = 100
    all_algorithms = list_algorithms()

    with concurrent.futures.ProcessPoolExecutor() as executor:
        for i in range(0, len(dll_names), BATCH_SIZE):
            batch = dll_names[i:i + BATCH_SIZE]
            results = executor.submit(batched_hashing, batch, all_algorithms).result()
            for (dll, algo, hashed_data) in results:
                if dll not in hashed_data_dict:
                    hashed_data_dict[dll] = {}
                hashed_data_dict[dll][algo] = hashed_data

    # Save to file
    with open('hashed_data.json', 'w') as f:
        json.dump(hashed_data_dict, f)

if __name__ == '__main__':
    main()
