import sys
import pefile
from colorama import Fore, init
from capstone import *

pe = pefile.PE(r"C:\Users\naore\Documents\C++\DebugFunctions\x64\Debug\DebugFunctions.exe")

# Check for the architecture: 32-bit or 64-bit
if pe.FILE_HEADER.Machine == pefile.MACHINE_TYPE['IMAGE_FILE_MACHINE_AMD64']:
    mode = CS_MODE_64
else:
    mode = CS_MODE_32

md = Cs(CS_ARCH_X86, mode)
image_base = pe.OPTIONAL_HEADER.ImageBase
imports = {}
for entry in pe.DIRECTORY_ENTRY_IMPORT:
    for imp in entry.imports:
        imports[imp.address] = imp.name
Anti_debugging = {"IsDebuggerPresent","CheckRemoteDebuggerPresent","NtGlobalFlag","NtQueryInformationProcess","NtQueryObject","OutputDebugString"}
Timing_Attacks = {"Sleep","SleepEx","NtDelayExecution","SetTimer","TimeSetEvent","WaitForSingleObject","WaitForSingleObject","CreateWaitableTimer"}
Injections_techniques = {"Injections_techniques","SetWindowsHooksEx","NtCreateThreadEx","RtlCreateUserThread","RtlCreateUserThread","NtQueueApcThread","GetThreadContext","SetThreadContext"}
image_base = pe.OPTIONAL_HEADER.ImageBase

for section in pe.sections:
    section_name = section.Name.decode('utf-8').rstrip('\x00')
    if section_name == ".text":
        for i in md.disasm(section.get_data(), section.VirtualAddress):
            virtual_address = image_base + i.address
            if i.mnemonic == "call":
                if "rip" in i.op_str:
                    offset_str = i.op_str.split('+')[-1].replace(']', '').strip()
                    offset = int(offset_str, 16)
                    effective_address = i.address + i.size + offset
                    clean_rip = hex(effective_address).split("0x")[1]
                    clean_rip_virtual_address = image_base + effective_address
                    if clean_rip_virtual_address in imports:
                        for address, name in imports.items():
                            if address == clean_rip_virtual_address:
                                init(autoreset=True)
                                if name.decode('utf-8') in Anti_debugging:
                                    print(Fore.RED + 'Found Anti Debugger!')
                                    print(Fore.BLUE + section_name + ":" + Fore.GREEN + hex(virtual_address) + "\t" + Fore.YELLOW + i.mnemonic + "\t" + Fore.RED + name.decode('utf-8') + Fore.WHITE + "[" + hex(clean_rip_virtual_address)+ "]" )
                                elif name.decode('utf-8') in Timing_Attacks:
                                    print(Fore.RED + "Found Timing Attacks")
                                    print(Fore.BLUE + section_name + ":" + Fore.GREEN + hex(virtual_address) + "\t" + Fore.YELLOW + i.mnemonic + "\t" + Fore.RED + name.decode('utf-8') + Fore.WHITE + "[" + hex(clean_rip_virtual_address)+ "]" )
                                elif name.decode('utf-8') in Injections_techniques:
                                    print(Fore.RED +"Found Injections techniques")
                                    print(Fore.BLUE + section_name + ":" + Fore.GREEN + hex(virtual_address) + "\t" + Fore.YELLOW + i.mnemonic + "\t" + Fore.RED + name.decode('utf-8') + Fore.WHITE + "[" + hex(clean_rip_virtual_address)+ "]" )
